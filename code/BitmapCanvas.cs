using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace FractalGenerator
{
    class BitmapCanvas : Canvas
    {
        #region Fields

        private Image _image = new Image();
        private WriteableBitmap _wb;
        private Int32Rect _rect;

        private int[,] _pixelArray;

        private int _bytesPerPixel;
        private int _stride;
        private int _arraySize;
        private byte[] _colorArray;

        Mandelbrot mandel = null;

        #endregion

        public BitmapCanvas() : this(200, 200) { }

        public BitmapCanvas(int width, int height)
        {
            // Create the writeable bitmap will be used to write and update.
            _wb = new WriteableBitmap(width, height, 96, 96, PixelFormats.Bgr24, null);

            // Array of integers generated by Mandelbrot algorithm which correspond to pixel color 
            _pixelArray = new int[width, height];

            // Define the rectangle of the writeable image we will modify. 
            // The size is that of the writeable bitmap.
            _rect = new Int32Rect(0, 0, _wb.PixelWidth, _wb.PixelHeight);

            // Calculate the number of bytes per pixel. 
            _bytesPerPixel = (_wb.Format.BitsPerPixel + 7) / 8; // round up

            // Stride is bytes per pixel times the number of pixels.
            // Stride is the byte width of a single rectangle row or pixelWidth * bpp
            _stride = _wb.PixelWidth * _bytesPerPixel;

            // Create a byte array for a the entire size of bitmap.
            _arraySize = _stride * _wb.PixelHeight;

            // Unwound array, size is pixelWidth * bytes per pixel (bpp) * pixelHeight
            _colorArray = new byte[_arraySize];

            // Define the Image element
            _image.Stretch = Stretch.None;
            _image.Margin = new Thickness(0);
            this.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(OnMouseDown);
            this.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(OnMouseDrag);
            this.PreviewMouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(OnMouseUp);

            // Add the Image to the parent StackPanel
            this.Children.Add(_image);

            mandel = new Mandelbrot();

            Run();
        }

        #region Mouse

        private Rectangle zoomBox;
        private bool IsCapturing = false;
        private Complex topLeft, bottomRight;
        private Point startPoint, endPoint;

        private void InitZoomBox()
        {
            zoomBox = new Rectangle();
            zoomBox.Name = "zoomBox";
            zoomBox.Stroke = new SolidColorBrush(Colors.White);
            zoomBox.StrokeThickness = 1;

            this.Children.Add(zoomBox);
        }

        private void DrawZoomBox()
        {
            zoomBox.SetValue(Canvas.LeftProperty, startPoint.X);
            zoomBox.SetValue(Canvas.TopProperty, startPoint.Y);

            zoomBox.Width = Math.Abs(endPoint.X - startPoint.X);
            zoomBox.Height = Math.Abs(endPoint.Y - startPoint.Y);
        }

        private void OnMouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            IsCapturing = true;

            Point point = e.GetPosition(_image);
            topLeft = mandel.Translate((int)point.X, (int)point.Y);

            startPoint = new Point(point.X, point.Y);
            endPoint = new Point(point.X, point.Y);

            InitZoomBox();
        }

        private void OnMouseDrag(object sender, System.Windows.Input.MouseEventArgs e)
        {
            if (IsCapturing)
            {
                Point point = e.GetPosition(_image);
                bottomRight = mandel.Translate((int)point.X, (int)point.Y);

                endPoint = new Point(point.X, point.Y);

                DrawZoomBox();
            }
        }

        private void OnMouseUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            IsCapturing = false;

            Point point = e.GetPosition(_image);
            bottomRight = mandel.Translate((int)point.X, (int)point.Y);

            mandel.TopLeft = topLeft;
            mandel.BottomRight = bottomRight;

            RemoveZoomBox();

            double width = Math.Abs(endPoint.X - startPoint.X);
            double height = Math.Abs(endPoint.Y - startPoint.Y);

            // Perform zoom only if user draws sufficiently large box
            if (width > 5.0 && height > 5.0)
                Run();
        }

        private void RemoveZoomBox()
        {
            var child = (from c in this.Children.OfType<UIElement>()
                         where (c as FrameworkElement).Name.Equals("zoomBox")
                         select c).First();
            this.Children.Remove(child);
        }

        #endregion

        public void Reset()
        {
            mandel.ResetViewPort();

            Run();
        }

        public void Run()
        {
            mandel.Generate(_pixelArray);

            ToByteArray();

            //Update writeable bitmap with the colorArray to the image.
            _wb.WritePixels(_rect, _colorArray, _stride, 0);

            //Set the Image source.
            _image.Source = _wb;
        }

        /// <summary>
        /// Roll 2-D int array into 1-D byte aray by concatenating row and expanding each int into (R,G,B) byte triplet
        /// </summary>
        private void ToByteArray()
        {
            byte[,] map = MapHelper.ColorMap;

            long index = 0;
            int color;
            byte R, G, B;
            
            for (int row = 0; row < _pixelArray.GetLength(0); ++row)
            {
                for (int col = 0; col < _pixelArray.GetLength(1); ++col)
                {
                    color = _pixelArray[row, col];

                    try
                    {
                        R = map[color, 0];
                        G = map[color, 1];
                        B = map[color, 2];
                    }
                    catch (Exception ex)
                    {
                        R = G = B = 0;
                    }

                    // Byte order: Blue-Green-Red
                    _colorArray[index++] = B;
                    _colorArray[index++] = G;
                    _colorArray[index++] = R;
                }
            }
        }

        #region Deprecated
        /*
        private Image _image = new Image();
        private WriteableBitmap _wb;
        private Int32Rect _rect;
        private int _bytesPerPixel;
        private int _stride;

        private int _arraySize;
        private byte[] _colorArray;

        public BitmapCanvas() : this(200, 200) { }

        public BitmapCanvas(int width, int height)
        {
            // Create the writeable bitmap will be used to write and update.
            _wb = new WriteableBitmap(width, height, 96, 96, PixelFormats.Bgr32, null);

            // Define the rectangle of the writeable image we will modify. 
            // The size is that of the writeable bitmap.
            _rect = new Int32Rect(0, 0, _wb.PixelWidth, _wb.PixelHeight);

            // Calculate the number of bytes per pixel. 
            _bytesPerPixel = (_wb.Format.BitsPerPixel + 7) / 8; // round up

            // Stride is bytes per pixel times the number of pixels.
            // Stride is the byte width of a single rectangle row.
            _stride = _wb.PixelWidth * _bytesPerPixel;

            // Create a byte array for a the entire size of bitmap.
            _arraySize = _stride * _wb.PixelHeight;

            _colorArray = new byte[_arraySize];

            Generate();
        }

        private void Generate()
        {
            // Define the Image element
            _image.Stretch = Stretch.None;
            _image.Margin = new Thickness(20);

            // Add the Image to the parent StackPanel
            this.Children.Add(_image);

            // DispatcherTimer setup
            // The DispatcherTimer will be used to update _random every
            //    second with a new random set of colors.
            DispatcherTimer dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);
            dispatcherTimer.IsEnabled = true;
            dispatcherTimer.Interval = new TimeSpan(0, 0, 1);
            dispatcherTimer.Start();
        }

        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            // Generate array
            Mandelbrot mandel = new Mandelbrot(_colorArray, _stride);

            //Update writeable bitmap with the colorArray to the image.
            _wb.WritePixels(_rect, _colorArray, _stride, 0);

            //Set the Image source.
            _image.Source = _wb;
        }
        
        //  System.Windows.Threading.DispatcherTimer.Tick handler
        //
        //  Updates the Image element with new random colors
        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            //Update the color array with new random colors
            Random value = new Random();
            value.NextBytes(_colorArray);

            //Update writeable bitmap with the colorArray to the image.
            _wb.WritePixels(_rect, _colorArray, _stride, 0);

            //Set the Image source.
            _image.Source = _wb;
        }
        private void ToByteArray()   
        {
            byte[,] map = null;
            GenerateColorMap(out map);

            long index = 0;
            int color;
            byte R, G, B;
            
            int max = 0;

            for (int row = 0; row < _pixelArray.GetLength(0); ++row)
            {
                for (int col = 0; col < _pixelArray.GetLength(1); ++col)
                {
                    color = _pixelArray[row, col];

                    if (color > max)
                        max = color;

                    //R = (byte)(color & 0xFF);
                    //G = (byte)(color >> 8 & 0xFF);
                    //B = (byte)(color >> 16 & 0xFF);

                    try
                    {
                        R = map[color, 0];
                        G = map[color, 1];
                        B = map[color, 2];
                    }
                    catch (Exception ex)
                    {
                        R = G = B = 0;
                    }



                    // Use lowest 8 bits of each int.
                    // R = 1st 2 bits, G = next 3 bits, B = next 3 bits
                    //R = (byte)(color & 0x03);
                    //G = (byte)(color >> 2 & 0x07);
                    //B = (byte)(color >> 5 & 0x07);

                    //R = G = B = (byte)(color);
                    // Byte order: Blue-Green-Red
                    _colorArray[index++] = B;
                    _colorArray[index++] = G;
                    _colorArray[index++] = R;

                }
            }
        }
         *         private void GenerateColorMap(out byte[,] map)
        {
/*
            map = new byte[,] {
{0,0,0},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{0,0,168},
{64,90,0},
{64,90,0},
{64,89,0},
{64,89,0},
{64,88,0},
{64,87,0},
{64,86,0},
{64,85,0},
{64,84,0},
{64,83,0},
{64,82,0},
{64,81,0},
{64,80,0},
{64,79,0},
{64,78,0},
{64,77,0},
{64,76,0},
{64,75,0},
{64,74,0},
{64,73,0},
{64,72,0},
{64,71,0},
{64,70,0},
{64,69,0},
{64,68,0},
{64,67,0},
{64,66,0},
{64,65,0},
{64,64,0},
{64,63,0},
{64,62,0},
{64,61,0},
{64,60,0},
{64,59,0},
{64,58,0},
{64,57,0},
{64,56,0},
{64,55,0},
{64,54,0},
{64,53,0},
{64,52,0},
{64,51,0},
{64,50,0},
{64,49,0},
{64,48,0},
{64,47,0},
{64,46,0},
{64,45,0},
{64,44,0},
{64,43,0},
{64,42,0},
{64,41,0},
{64,40,0},
{64,39,0},
{64,38,0},
{64,37,0},
{64,36,0},
{64,35,0},
{64,34,0},
{64,33,0},
{64,32,0},
{64,31,0},
{64,30,0},
{64,29,0},
{64,28,0},
{64,27,0},
{64,26,0},
{64,25,0},
{64,24,0},
{64,23,0},
{64,22,0},
{64,21,0},
{64,20,0},
{64,19,0},
{64,18,0},
{64,17,0},
{64,17,0},
{64,16,0},
{64,16,0},
{64,15,0},
{64,15,0},
{64,14,0},
{64,14,0},
{64,13,0},
{64,13,0},
{64,12,0},
{64,12,0},
{64,11,0},
{64,11,0},
{64,10,0},
{64,10,0},
{64,9,0},
{64,9,0},
{64,8,0},
{64,8,0},
{64,7,0},
{64,7,0},
{64,6,0},
{64,6,0},
{64,5,0},
{64,5,0},
{64,4,0},
{64,4,0},
{64,3,0},
{64,3,0},
{64,2,0},
{64,2,0},
{64,1,0},
{64,1,0},
{64,0,0},
{64,0,0},
{200,200,255},
{200,200,255},
{200,200,255},
{200,200,255},
{205,205,255},
{205,205,255},
{205,205,255},
{205,205,255},
{210,210,255},
{210,210,255},
{210,210,255},
{210,210,255},
{215,215,255},
{215,215,255},
{215,215,255},
{215,215,255},
{220,220,255},
{220,220,255},
{220,220,255},
{220,220,255},
{225,225,255},
{225,225,255},
{225,225,255},
{225,225,255},
{230,230,255},
{230,230,255},
{230,230,255},
{230,230,255},
{235,235,255},
{235,235,255},
{235,235,255},
{235,235,255},
{240,240,255},
{240,240,255},
{240,240,255},
{240,240,255},
{245,245,255},
{245,245,255},
{245,245,255},
{245,245,255},
{250,250,255},
{250,250,255},
{250,250,255},
{250,250,255},
{255,255,255},
        };

            
            map = new byte[,] {
                {0,0,0},
                {0,252,0},
                {0,252,0},
                {0,248,0},
                {0,248,0},
                {0,248,0},
                {0,248,0},
                {0,244,0},
                {0,244,0},
                {0,244,0},
                {0,244,0},
                {0,240,0},
                {0,240,0},
                {0,240,0},
                {0,240,0},
                {0,236,0},
                {0,236,0},
                {0,236,0},
                {0,236,0},
                {0,232,0},
                {0,232,0},
                {0,232,0},
                {0,232,0},
                {0,228,0},
                {0,228,0},
                {0,228,0},
                {0,228,0},
                {0,224,0},
                {0,224,0},
                {0,224,0},
                {0,224,0},
                {0,220,0},
                {0,220,0},
                {0,220,0},
                {0,220,0},
                {0,216,0},
                {0,216,0},
                {0,216,0},
                {0,216,0},
                {0,212,0},
                {0,212,0},
                {0,212,0},
                {0,212,0},
                {0,208,0},
                {0,208,0},
                {0,208,0},
                {0,208,0},
                {0,204,0},
                {0,204,0},
                {0,204,0},
                {0,204,0},
                {0,200,0},
                {0,200,0},
                {0,200,0},
                {0,200,0},
                {0,196,0},
                {0,196,0},
                {0,196,0},
                {0,196,0},
                {0,192,0},
                {0,192,0},
                {0,192,0},
                {0,192,0},
                {0,188,0},
                {0,188,0},
                {0,188,0},
                {0,188,0},
                {0,184,0},
                {0,184,0},
                {0,184,0},
                {0,184,0},
                {0,180,0},
                {0,180,0},
                {0,180,0},
                {0,180,0},
                {0,176,0},
                {0,176,0},
                {0,176,0},
                {0,176,0},
                {0,172,0},
                {0,172,0},
                {0,172,0},
                {0,172,0},
                {0,168,0},
                {0,168,0},
                {0,168,0},
                {0,168,0},
                {0,164,0},
                {0,164,0},
                {0,164,0},
                {0,164,0},
                {0,160,0},
                {0,160,0},
                {0,160,0},
                {0,160,0},
                {0,156,0},
                {0,156,0},
                {0,156,0},
                {0,156,0},
                {0,152,0},
                {0,152,0},
                {0,152,0},
                {0,152,0},
                {0,148,0},
                {0,148,0},
                {0,148,0},
                {0,148,0},
                {0,144,0},
                {0,144,0},
                {0,144,0},
                {0,144,0},
                {0,140,0},
                {0,140,0},
                {0,140,0},
                {0,140,0},
                {0,136,0},
                {0,136,0},
                {0,136,0},
                {0,136,0},
                {0,132,0},
                {0,132,0},
                {0,132,0},
                {0,132,0},
                {0,128,0},
                {0,128,0},
                {0,128,0},
                {0,128,0},
                {0,124,0},
                {0,124,0},
                {0,124,0},
                {0,124,0},
                {0,120,0},
                {0,120,0},
                {0,120,0},
                {0,120,0},
                {0,116,0},
                {0,116,0},
                {0,116,0},
                {0,116,0},
                {0,112,0},
                {0,112,0},
                {0,112,0},
                {0,112,0},
                {0,108,0},
                {0,108,0},
                {0,108,0},
                {0,108,0},
                {0,104,0},
                {0,104,0},
                {0,104,0},
                {0,104,0},
                {0,100,0},
                {0,100,0},
                {0,100,0},
                {0,100,0},
                {0,96,0},
                {0,96,0},
                {0,96,0},
                {0,96,0},
                {0,92,0},
                {0,92,0},
                {0,92,0},
                {0,92,0},
                {0,88,0},
                {0,88,0},
                {0,88,0},
                {0,88,0},
                {0,84,0},
                {0,84,0},
                {0,84,0},
                {0,84,0},
                {0,80,0},
                {0,80,0},
                {0,80,0},
                {0,80,0},
                {0,76,0},
                {0,76,0},
                {0,76,0},
                {0,76,0},
                {0,72,0},
                {0,72,0},
                {0,72,0},
                {0,72,0},
                {0,68,0},
                {0,68,0},
                {0,68,0},
                {0,68,0},
                {0,64,0},
                {0,64,0},
                {0,64,0},
                {0,64,0},
                {0,60,0},
                {0,60,0},
                {0,60,0},
                {0,60,0},
                {0,56,0},
                {0,56,0},
                {0,56,0},
                {0,56,0},
                {0,52,0},
                {0,52,0},
                {0,52,0},
                {0,52,0},
                {0,48,0},
                {0,48,0},
                {0,48,0},
                {0,48,0},
                {0,44,0},
                {0,44,0},
                {0,44,0},
                {0,44,0},
                {0,40,0},
                {0,40,0},
                {0,40,0},
                {0,40,0},
                {0,36,0},
                {0,36,0},
                {0,36,0},
                {0,36,0},
                {0,32,0},
                {0,32,0},
                {0,32,0},
                {0,32,0},
                {0,28,0},
                {0,28,0},
                {0,28,0},
                {0,28,0},
                {0,24,0},
                {0,24,0},
                {0,24,0},
                {0,24,0},
                {0,20,0},
                {0,20,0},
                {0,20,0},
                {0,20,0},
                {0,16,0},
                {0,16,0},
                {0,16,0},
                {0,16,0},
                {0,12,0},
                {0,12,0},
                {0,12,0},
                {0,12,0},
                {0,8,0},
                {0,8,0},
                {0,8,0},
                {0,8,0},
                {0,4,0},
                {0,4,0},
                {0,4,0},
                {0,4,0},
                {0,0,0},
                {0,0,0},
                {0,0,0},
                {0,0,0},
                {0,0,0},
                {0,0,0}
            };
            
            /*
            map = new byte[,] {
                    {0,0,0},
                    {0,0,0},
                    {8,0,0},
                    {16,4,4},
                    {24,4,8},
                    {32,8,12},
                    {40,12,16},
                    {48,12,20},
                    {56,16,24},
                    {64,20,28},
                    {72,20,32},
                    {80,24,36},
                    {88,28,40},
                    {96,28,44},
                    {104,32,48},
                    {112,36,52},
                    {120,36,56},
                    {128,40,60},
                    {136,40,64},
                    {144,44,68},
                    {152,48,72},
                    {160,48,76},
                    {168,52,80},
                    {176,56,84},
                    {184,56,88},
                    {192,60,92},
                    {200,64,96},
                    {208,64,100},
                    {216,68,104},
                    {224,72,108},
                    {232,72,112},
                    {240,76,116},
                    {252,80,120},
                    {248,80,120},
                    {240,76,116},
                    {232,76,112},
                    {224,72,108},
                    {216,68,104},
                    {208,68,100},
                    {200,64,96},
                    {192,60,92},
                    {184,60,88},
                    {176,56,84},
                    {168,56,80},
                    {160,52,76},
                    {152,48,72},
                    {144,48,68},
                    {136,44,64},
                    {128,40,60},
                    {120,40,60},
                    {112,36,56},
                    {104,36,52},
                    {96,32,48},
                    {88,28,44},
                    {80,28,40},
                    {72,24,36},
                    {64,20,32},
                    {56,20,28},
                    {48,16,24},
                    {40,16,20},
                    {32,12,16},
                    {24,8,12},
                    {16,8,8},
                    {8,4,4},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,4,0},
                    {0,12,0},
                    {0,20,0},
                    {0,28,0},
                    {0,36,0},
                    {0,44,0},
                    {0,52,0},
                    {0,60,0},
                    {0,68,0},
                    {0,76,0},
                    {0,84,0},
                    {0,92,0},
                    {0,100,0},
                    {0,108,0},
                    {0,116,0},
                    {0,124,0},
                    {0,132,0},
                    {0,140,0},
                    {0,148,0},
                    {0,156,0},
                    {0,164,0},
                    {0,172,0},
                    {0,180,0},
                    {0,188,0},
                    {0,196,0},
                    {0,204,0},
                    {0,212,0},
                    {0,220,0},
                    {0,228,0},
                    {0,236,0},
                    {0,244,0},
                    {0,252,0},
                    {0,248,0},
                    {0,240,0},
                    {0,232,0},
                    {0,224,0},
                    {0,216,0},
                    {0,208,0},
                    {0,200,0},
                    {0,192,0},
                    {0,184,0},
                    {0,176,0},
                    {0,168,0},
                    {0,160,0},
                    {0,152,0},
                    {0,144,0},
                    {0,136,0},
                    {0,128,0},
                    {0,120,0},
                    {0,112,0},
                    {0,104,0},
                    {0,96,0},
                    {0,88,0},
                    {0,80,0},
                    {0,72,0},
                    {0,64,0},
                    {0,56,0},
                    {0,48,0},
                    {0,40,0},
                    {0,32,0},
                    {0,24,0},
                    {0,16,0},
                    {0,8,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {4,4,0},
                    {12,12,0},
                    {20,20,0},
                    {28,28,0},
                    {36,36,0},
                    {44,44,0},
                    {52,52,0},
                    {60,60,0},
                    {68,68,0},
                    {76,76,0},
                    {84,84,0},
                    {92,92,0},
                    {100,100,0},
                    {108,108,0},
                    {116,116,0},
                    {124,124,0},
                    {132,132,0},
                    {140,140,0},
                    {148,148,0},
                    {156,156,0},
                    {164,164,0},
                    {172,172,0},
                    {180,180,0},
                    {188,188,0},
                    {196,196,0},
                    {204,204,0},
                    {212,212,0},
                    {220,220,0},
                    {228,228,0},
                    {236,236,0},
                    {244,244,0},
                    {252,252,0},
                    {248,248,0},
                    {240,240,0},
                    {232,232,0},
                    {224,224,0},
                    {216,216,0},
                    {208,208,0},
                    {200,200,0},
                    {192,192,0},
                    {184,184,0},
                    {176,176,0},
                    {168,168,0},
                    {160,160,0},
                    {152,152,0},
                    {144,144,0},
                    {136,136,0},
                    {128,128,0},
                    {120,120,0},
                    {112,112,0},
                    {104,104,0},
                    {96,96,0},
                    {88,88,0},
                    {80,80,0},
                    {72,72,0},
                    {64,64,0},
                    {56,56,0},
                    {48,48,0},
                    {40,40,0},
                    {32,32,0},
                    {24,24,0},
                    {16,16,0},
                    {8,8,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0},
                    {0,0,0}
                };
            */
        #endregion

    }   // class
}   // ns
